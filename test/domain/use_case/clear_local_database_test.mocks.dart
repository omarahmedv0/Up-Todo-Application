// Mocks generated by Mockito 5.4.4 from annotations
// in up_todo_app/test/domain/use_case/clear_local_database_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:up_todo_app/data/networking/api_error_model.dart' as _i5;
import 'package:up_todo_app/data/requests/requests.dart' as _i7;
import 'package:up_todo_app/domain/models/get_todos_model.dart' as _i8;
import 'package:up_todo_app/domain/models/login_model.dart' as _i6;
import 'package:up_todo_app/domain/repository/repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i3.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ApiErrorModel, _i6.LoginModel>> login(
          _i7.LoginRequestBody? loginRequestBody) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [loginRequestBody],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ApiErrorModel, _i6.LoginModel>>.value(
                _FakeEither_0<_i5.ApiErrorModel, _i6.LoginModel>(
          this,
          Invocation.method(
            #login,
            [loginRequestBody],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ApiErrorModel, _i6.LoginModel>>);

  @override
  _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.TodoModel>> editTodo(
          _i7.UpdateTodoRequestBody? updateTodoRequestBody) =>
      (super.noSuchMethod(
        Invocation.method(
          #editTodo,
          [updateTodoRequestBody],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.TodoModel>>.value(
                _FakeEither_0<_i5.ApiErrorModel, _i8.TodoModel>(
          this,
          Invocation.method(
            #editTodo,
            [updateTodoRequestBody],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.TodoModel>>);

  @override
  _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.TodoModel>> deleteTodo(
          int? todoID) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [todoID],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.TodoModel>>.value(
                _FakeEither_0<_i5.ApiErrorModel, _i8.TodoModel>(
          this,
          Invocation.method(
            #deleteTodo,
            [todoID],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.TodoModel>>);

  @override
  _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.TodoModel>> addTodo(
          _i7.AddTodoRequestBody? addTodoRequestBody) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [addTodoRequestBody],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.TodoModel>>.value(
                _FakeEither_0<_i5.ApiErrorModel, _i8.TodoModel>(
          this,
          Invocation.method(
            #addTodo,
            [addTodoRequestBody],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.TodoModel>>);

  @override
  _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.GetAllTodosModel>> getAllTodos(
          _i7.GetAllTodosRequest? getAllTodosRequest) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTodos,
          [getAllTodosRequest],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.ApiErrorModel, _i8.GetAllTodosModel>>.value(
            _FakeEither_0<_i5.ApiErrorModel, _i8.GetAllTodosModel>(
          this,
          Invocation.method(
            #getAllTodos,
            [getAllTodosRequest],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ApiErrorModel, _i8.GetAllTodosModel>>);

  @override
  _i4.Future<String> deleteLocalDatabase() => (super.noSuchMethod(
        Invocation.method(
          #deleteLocalDatabase,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #deleteLocalDatabase,
            [],
          ),
        )),
      ) as _i4.Future<String>);
}
